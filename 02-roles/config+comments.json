Example node configuration (wont work unless you strip comments)

Program parses all nodes in the same loop.
However, semantically we can classify nodes into three categories
- external input node - node that simulate events from "other" applications that
  comminicate with "our" through message queue (rabbitmq)
- internal processing node - node that wait for a message or generate one or
  do something; as a result it may send a message to some queue(s),
  or to a file (e.g. simulating database access)
- external output node - node that simulate "other" apps that read messages from
  some queue ("consumes" messages generated by "our" app)

Node behavious is described with three elements:
1. how it gets its "data" (queue or generate one)
2. how it process its "data" (duration, transformation on data) into "result"
3. where it saves its "result" (if there is one)

Example system:
- five nodes communicating in pattern:
EXT-in-1 -> {ex1->q1} -> {Node-1 + Node-2} -> {ex2->q2} -> EXT-out-1 (print)
            {ex1->q3} -> Node-3 (log)         {ex2->q3} -> Node-3 (log)

Radi jednostavnosti implementacije koristi se exchange fanout tipa i kad je
potreban samo jedan red. Redovi moraju biti napravljeni prije nego producer
pošalje poruku - inače bi se ta poruka izgubila.

Redovi su stvoreni sa zastavicama/pozivima:
- exclusive=False - više consumera može čekati na poruku
- durable=True - ako se rabbitmq ugasi, poruke se pamte
- prefetch_count=1 - ne slati više od jedne poruke jednom consumeru dok ne
  potvrdi da je prethodnu obradio (i može se brisati iz reda)
- auto_ack=False - consumer ručno potvrđuje da je poruka obrađenba

Nodes EXT-in-1 and EXT-out-1 simulate other applications.
Nodes Node-1 to Node-3 are part of our application.
Node-1 and Node-2 wait on q1 and when message arrives one of them process it (only one).
Node-3 gets a copy of outgoing message (e.g. for logging).

Commented JSON follows (uncommented is in config.json)

{
	"queues" : [ //list of exchanges and queues to bind together
		{
			"exchange" : "ex-1",
			"queues": [ "q1", "q3" ]
		},
		{
			"exchange" : "ex-2",
			"queues": [ "q2", "q3" ] //q3 will be bound to both exchanges
		}
	],

	"nodes" :
	[
		{
			"name" : "EXT-in-1",

			"input" : { //only one per node
				"type" : "GEN-MSG", //generate new message
				"interval": {
					"type" : "deterministic", //or "non-deterministic" - using exponential distribution for interval time
					"time" : 5 //seconds; can be real number, e.q. 0.2
				},
				"initial-delay" : 3, //first loop of the node, to synchronize start of simulation
				"prefix" : "{E1}" //if given will prefix data generated in processing phase
			},

			"processing" : {
				"duration" : {
					"type" : "deterministic",
					"time" : 0 //send it as soon as its generated
				},
				"initial-value" : 1000, //initial data, in next loops will be incremented
				"append" : "{E1}"
			},

			"output" : {
				"type" : "exchange",
				"name" : "ex-1"
			}
		},

		{
			"name" : "Node-1",

			"input" : {
				"type" : "queue",
				"exchanges" : ["ex-1"],
				"queue" : "q1"
			},

			"processing" : {
				"duration" : {
					"type" : "deterministic",
					"time" : 2
				},
				"initial-value" : 2000,
				"append" : "{N1}"
			},

			"output" : {
				"type" : "queue",
				"exchange" : "ex-2"
			}

		},

		{
			"name" : "Node-2", //same as Node-1

			"input" : {
				"type" : "queue",
				"exchanges" : ["ex-1"],
				"queue" : "q1"
			},

			"processing" : {
				"duration" : {
					"type" : "deterministic",
					"time" : 2
				},
				"initial-value" : 2000,
				"append" : "{N1}"
			},

			"output" : {
				"type" : "queue",
				"exchange" : "ex-2"
			}

		},

		{
			"name" : "Node-3",

			"input" : {
				"type" : "queue",
				"exchanges" : ["ex-1", "ex-2"],
				"queue" : "q3"
			},

			"processing" : {
				"duration" : {
					"type" : "deterministic",
					"time" : 2
				}
			},

			"output" : {
				"type" : "log",
				"name" : "log.txt"
			}

		},

		{
			"name" : "EXT-out-1",

			"input" : {
				"type" : "queue",
				"exchanges" : ["ex-1", "ex-2"],
				"queue" : "q3"
			},

			"processing" : {
				"duration" : {
					"type" : "deterministic",
					"time" : 2
				}
			},

			"output" : {
				"type" : "STDOUT"
			}

		}
	]
}

